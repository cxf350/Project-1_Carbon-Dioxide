int xspacing = 5;   // How far apart should each horizontal location be spaced
int w;              // Width of entire wave

float theta = 0.0;  // Start angle at 0
//float amplitude = 95.0;  // Height of wave -- this variable should be local
float period = 500.0;  // How many pixels before the wave repeats
float dx;  // Value for incrementing X, a function of period and xspacing
float[] yvalues;  // Using an array to store height values for the wave


// Sine Wave by Daniel Shiffman


void calcWave(float amp) {
  w = width+32;
  dx = (PI / period) * xspacing;
  yvalues = new float[w/xspacing];

  // Increment theta (try different values for 'angular velocity' here
  theta += 0.1;

  float new_amp = map(amp, 0, 5000, 0, 100);

  // For every x value, calculate a y value with sine function
  float x = theta;
  for (int i = 0; i < yvalues.length; i++) {
    yvalues[i] = 100+ sin(x)*new_amp;
    x+=dx;
  }
}

void renderWave() {
  noStroke();
  //fill(255, (random(100,250)));
  fill (map(carbon_dioxide, 0, 5000, 255, 0));  
  // fill(map(carbon_dioxide, 0, 5000, 255, 0), random(60,255));

  // A simple way to draw the wave with an ellipse at each location
  for (int x = 0; x < yvalues.length; x++) {
    for (float j = 1; j < 4; j += 0.03) {
      ellipse(j*x*xspacing, j*height/2+yvalues[x], 3, 3);
      // strokeWeight(3);
      // stroke((map(carbon_dioxide, 0, 5000, 255, 0)));
      //point(j*x*xspacing, j*height/2+yvalues[x]);
    }
  }
}

void renderWave_() {
  noStroke();
  //fill(255, (random(100,250)));
  fill (map(carbon_dioxide, 0, 5000, 255, 0));  
  // fill(map(carbon_dioxide, 0, 5000, 255, 0), random(60,255));

  // A simple way to draw the wave with an ellipse at each location
  for (int x = 0; x < yvalues.length; x++) {
    ellipse(x*xspacing, height/2+yvalues[x], 3, 3);
  }


  for (int x = 0; x < yvalues.length; x++) {
    ellipse(1.04*x*xspacing, 1.04*height/2+yvalues[x], 3, 3);
  }


  for (int x = 0; x < yvalues.length; x++) {
    ellipse(1.1*x*xspacing, 1.1*height/2+yvalues[x], 3, 3);
  }


  for (int x = 0; x < yvalues.length; x++) {
    ellipse(1.18*x*xspacing, 1.18*height/2+yvalues[x], 3, 3);
  }


  for (int x = 0; x < yvalues.length; x++) {
    ellipse(1.28*x*xspacing, 1.28*height/2+yvalues[x], 3, 3);
  }

  for (int x = 0; x < yvalues.length; x++) {
    ellipse(1.40*x*xspacing, 1.40*height/2+yvalues[x], 3, 3);
  }

  for (int x = 0; x < yvalues.length; x++) {
    ellipse(1.54*x*xspacing, 1.54*height/2+yvalues[x], 3, 3);
  }

  for (int x = 0; x < yvalues.length; x++) {
    ellipse(1.70*x*xspacing, 1.70*height/2+yvalues[x], 3, 3);
  }

  for (int x = 0; x < yvalues.length; x++) {
    ellipse(1.88*x*xspacing, 1.88*height/2+yvalues[x], 3, 3);
  }

  for (int x = 0; x < yvalues.length; x++) {
    ellipse(2.08*x*xspacing, 2.08*height/2+yvalues[x], 3, 3);
  }

  for (int x = 0; x < yvalues.length; x++) {
    ellipse(2.3*x*xspacing, 2.3*height/2+yvalues[x], 3, 3);
  }

  for (int x = 0; x < yvalues.length; x++) {
    ellipse(2.54*x*xspacing, 2.54*height/2+yvalues[x], 3, 3);
  }

  for (int x = 0; x < yvalues.length; x++) {
    ellipse(2.8*x*xspacing, 2.8*height/2+yvalues[x], 3, 3);
  }

  for (int x = 0; x < yvalues.length; x++) {
    ellipse(3.08*x*xspacing, 3.08*height/2+yvalues[x], 3, 3);
  }

  for (int x = 0; x < yvalues.length; x++) {
    ellipse(3.38*x*xspacing, 3.38*height/2+yvalues[x], 3, 3);
  }

  for (int x = 0; x < yvalues.length; x++) {
    ellipse(3.70*x*xspacing, 3.70*height/2+yvalues[x], 3, 3);
  }

  for (int x = 0; x < yvalues.length; x++) {
    ellipse(4.04*x*xspacing, 4.04*height/2+yvalues[x], 3, 3);
  }

  for (int x = 0; x < yvalues.length; x++) {
    ellipse(4.4*x*xspacing, 4.4*height/2+yvalues[x], 3, 3);
  }
}
